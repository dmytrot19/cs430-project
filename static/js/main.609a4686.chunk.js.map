{"version":3,"sources":["Components/Example.js","Algorithms/FindMedian.js","Components/MedianFinder.js","Algorithms/RomanNumeralConverter.js","Components/RomanNumeralConverter.js","App.js","reportWebVitals.js","index.js"],"names":["Example","array","className","output","element","push","renderCells","FindMedian","A","B","length","x","y","low","high","partitionX","Math","floor","partitionY","leftX","rightX","leftY","rightY","Number","MIN_VALUE","console","log","MAX_VALUE","max","min","ACTIONS","EXAMPLE1","EXAMPLE2","EXAMPLE3","reducer","state","action","type","document","getElementsByClassName","style","backgroundColor","isSorted","MedianFinder","useState","arrayA","setArrayA","arrayB","setArrayB","arrayAInput","setArrayAInput","arrayBInput","setArrayBInput","setOutput","errorMessage","setErrorMessage","useReducer","dispatch","handleArrayInput","input","textArray","replace","split","textArrayToIntArray","t","isNaN","parseInt","onExamplePress","example","checkIfSorted","arr","i","useEffect","color","textAlign","flex","onClick","autoComplete","name","value","onChange","e","target","id","ROMAN_NUMERALS","INT_VALUES","toRoman","roman","index","RomanNumeralConverter","intInput","setIntInput","NaN","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.609a4686.chunk.js","sourcesContent":["import React, {useReducer, useEffect, useState} from 'react';\nimport './Example.css'\n\nconst Example = ({array})=>{\n\n\n    const renderCells = (array)=>{\n        let output = []\n        for (let element of array){\n            output.push(<text>{element}</text>)\n        }\n       return (<div className=\"cell\">\n           {output}\n       </div>)\n    }\n\n    return(\n        <div className='example-container'>\n            {renderCells(array)}  \n        </div>\n    )\n\n\n}\n\nexport default Example\n\n","function FindMedian(A, B) {\n  if (A.length > B.length) {\n     return FindMedian(B, A);\n  }\n\n  let x = A.length; //always the shorter array\n  let y = B.length; //always the longer array\n  //the initial search range\n  let low = 0;\n  let high = x;\n\n  while (low <= high) {\n    //if this condition ever fails, it means the initial arguments were not sorted\n    /* we choose our initial partition as the midpoint of the smaller array\n     * so that we can remove the largest possible search area on the next iteration.\n     * We want the size of the partition to always include half of the elements of the array on each side,\n     * so we have the relationship that:\n     * partitionX + partitionY = (lengthSmallerArray + lengthLargerArray + 1 ) / 2 */\n    let partitionX = Math.floor((low + high) / 2);\n    let partitionY = Math.floor((x + y + 1) / 2 - partitionX);\n\n    //now find the values directly to the left and right of the partitions in each array\n    let leftX;\n    let rightX;\n    let leftY;\n    let rightY;\n\n    /* we also need to control what happens when there is nothing on either side of the partition\n     * do this by using either maximum or minimum \"dummy\" values*/\n\n    if (partitionX == 0) {\n      //there is nothing left of the partition in the smaller array\n      leftX = Number.MIN_VALUE;\n    } else {\n      console.log(\"hii\");\n      leftX = A[partitionX - 1];\n      console.log(partitionX, \"leftX\");\n    }\n\n    if (partitionX == x) {\n      //there is nothing right of the partition in the smaller array\n      rightX = Number.MAX_VALUE;\n    } else rightX = A[partitionX];\n\n    if (partitionY == 0) {\n      //there is nothing left of the partition in the larger array\n      leftY = Number.MIN_VALUE;\n    } else leftY = B[partitionY - 1];\n\n    if (partitionY == y) {\n      //there is nothing right of the partition in the larger array\n      rightY = Number.MAX_VALUE;\n    } else rightY = B[partitionY];\n\n    /* now that the values at of the current partition is established, we check to see if all the\n     * values on the left are less than all of those on the right. If so, we can return the median.*/\n\n    if (leftX <= rightY && leftY <= rightX) {\n      if ((x + y) % 2 == 0) {\n        //total number of elements is even\n        return (Math.max(leftX, leftY) + Math.min(rightX, rightY)) / 2;\n      } else {\n        //total number of elements is odd\n        return Math.max(leftX, leftY);\n      }\n    } else {\n      /* if the condition is not met we must reduce the search criteria and iterate again*/\n      if (leftX > rightY) {\n        //the median must be less than the current partitionX\n        high = partitionX - 1; //eliminate the search area greater than partitionX\n      } else {\n        //the median must be greater than the current partitionX\n        low = partitionX + 1; //eliminate the search area less than partitionX\n      }\n    }\n  }\n  return \"exception\";\n}\n\nexport default FindMedian;\n","import React, { useReducer, useEffect, useState } from \"react\";\nimport \"./MedianFinder.css\";\nimport Example from \"./Example.js\";\nimport FindMedian from \"../Algorithms/FindMedian\";\n\n//Actions for useReducer hook\nconst ACTIONS = {\n  SORTED: \"sorted\",\n  NOT_SORTED: \"notSorted\",\n};\n\n//Default examples that the user will be able to select\nconst EXAMPLE1 = {\n  A: [1, 3, 5, 7],\n  B: [2, 4, 6, 8],\n};\n\nconst EXAMPLE2 = {\n  A: [2, 3, 6, 7, 8],\n  B: [3, 6, 8, 11, 12],\n};\n\nconst EXAMPLE3 = {\n  A: [1, 2, 5, 11, 17, 22],\n  B: [3, 4, 6, 8, 9, 10],\n};\n//Function to hande reducer state changes, which will primarily result in the sorted indicator updated (green if sorted, and red if not sorted)\nfunction reducer(state, action) {\n  switch (action.type) {\n    case ACTIONS.SORTED:\n      document.getElementsByClassName(\"check-item\")[0].style.backgroundColor =\n        \"rgba(41, 255, 191,.8)\";\n      return { isSorted: true };\n    case ACTIONS.NOT_SORTED:\n      document.getElementsByClassName(\"check-item\")[0].style.backgroundColor =\n        \"rgba(255, 39, 39,.8)\";\n      return { isSorted: false };\n  }\n}\n//Median finder component\nconst MedianFinder = () => {\n  //constants for useState and useReducer hooks\n  const [arrayA, setArrayA] = useState([]);\n  const [arrayB, setArrayB] = useState([]);\n  const [arrayAInput, setArrayAInput] = useState([]);\n  const [arrayBInput, setArrayBInput] = useState([]);\n  const [output, setOutput] = useState(0);\n  const [errorMessage, setErrorMessage] = useState(\"\");\n  const [state, dispatch] = useReducer(reducer, {\n    isSorted: true,\n  });\n  //handles the user input (NaN input, spaces, parsing, etc)\n  const handleArrayInput = (array, input) => {\n    //remove all the white spaces from the input, and convert into an array\n    let textArray = input.replace(/ /g, \"\").split(\",\");\n    //User is adding input for array A\n    if (array === \"A\") {\n      setArrayAInput(input);\n      setArrayA(textArrayToIntArray(textArray));\n    } else { //User is adding input for array B\n      setArrayBInput(input);\n      setArrayB(textArrayToIntArray(textArray));\n    }\n  };\n  //converts a the text array obtained throught user input into an integer array\n  const textArrayToIntArray = (array) => {\n    let output = [];\n    for (let t of array) {\n      if (t !== \"\" && !isNaN(t)) output.push(parseInt(t));\n    }\n    return output;\n  };\n\n  //handles the examples selections which updates the state for both arrays, by using the constants EXAMPLE1, EXAMPLE2, and EXAMPLE3 (the only possible objects that can be selected)\n  const onExamplePress = (example) => {\n    setArrayA(example.A);\n    setArrayB(example.B);\n  };\n  //checks if soreted\n  function checkIfSorted(arr) {\n    for (let i = 0; i < arr.length - 1; i++) {\n      if (arr[i] > arr[i + 1]) {\n        return false;\n      }\n    }\n  }\n  //on arrayB or arrayA input change, a dispatch call is sent for the reducer to update the state\n  useEffect(() => {\n    if (arrayB.length === arrayA.length) dispatch({ type: \"length\" });\n    else {\n      dispatch({ type: \"notSameLength\" });\n    }\n    if (checkIfSorted(arrayA) === false || checkIfSorted(arrayB) === false)\n      dispatch({ type: \"notSorted\" });\n    else dispatch({ type: \"sorted\" });\n  }, [arrayB, arrayA]);\n  //Median finder return component\n  return (\n    <div className=\"container\">\n      <h3 className=\"info\">\n        Click an Example or provide an Input\n      </h3>\n      <ul>\n        <li>Has to be Sorted</li>\n        <li>Numbers separated by ' , ' (1, 2, 3, ...)</li>\n      </ul>\n     \n        <div className=\"error-div\">\n          <text\n            className=\"output-text\"\n            style={{ color: \"red\", textAlign: \"center\" }}\n          >\n            {errorMessage}\n          </text>\n        </div>\n      \n\n      <div className=\"example-row\">\n        <a style={{flex:1}} onClick={() => onExamplePress(EXAMPLE1)}>\n          <div className=\"example-cell\" >\n            <text>Example 1</text>\n            <Example array={EXAMPLE1.A} />\n            <Example array={EXAMPLE1.B} />\n          </div>\n        </a>\n\n        <a style={{flex:1}} onClick={() => onExamplePress(EXAMPLE2)}>\n          <div className=\"example-cell\" >\n            <text>Example 2</text>\n            <Example array={EXAMPLE2.A} />\n            <Example array={EXAMPLE2.B} />\n          </div>\n        </a>\n\n        <a style={{flex:1}} onClick={() => onExamplePress(EXAMPLE3)}>\n          <div className=\"example-cell\" >\n            <text>Example 3</text>\n            <Example array={EXAMPLE3.A} />\n            <Example array={EXAMPLE3.B} />\n          </div>\n        </a>\n      </div>\n      <div className=\"input-row\">\n        <form autoComplete='off'>\n          <label className=\"labelA\">\n            Array A Input:\n            <input\n              type=\"text\"\n              name=\"A\"\n              value={arrayAInput}\n              onChange={(e) => handleArrayInput(\"A\", e.target.value)}\n            />\n            <text>Current Array A:</text>\n            <div className=\"current-array-container\">\n              <Example array={arrayA} />\n            </div>\n          </label>\n          <label className=\"labelB\">\n            Array B Input\n            <input\n              value={arrayBInput}\n              type=\"text\"\n              name=\"B\"\n              value={arrayBInput}\n              onChange={(e) => handleArrayInput(\"B\", e.target.value)}\n            />\n            <text>Current Array B:</text>\n            <div className=\"current-array-container\">\n              <Example array={arrayB} />\n            </div>\n          </label>\n          \n        </form>\n      </div>\n      <div className=\"submit-container\">\n        <input\n          type=\"submit\"\n          value=\"Compute Median\"\n          className=\"submit\"\n\n          onClick={() => {\n            //checks if sorted, if not, sets the error message, otherwise, proceed with the computation\n            if (state.isSorted){\n              setOutput(FindMedian(arrayA, arrayB)); setErrorMessage(\"\");\n            }\n            else {\n              setErrorMessage(\n                \"Make Sure the arrays are sorted!\"\n              );\n            }\n          }}\n        />\n      </div>\n      <div className=\"check\">\n        <div className=\"check-column\">\n          <text>Is Sorted?</text>\n          <div id=\"check-item\" className=\"check-item\"></div>\n        </div>\n\n      </div>\n      <div className=\"output-div\">\n        <div className=\"output-div-column\">\n          {/*outputs the median*/}\n          <text>Output:</text>\n          <text className=\"output-text\">{output}</text>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default MedianFinder;\n","/* We initialize 2 arrays, one that contains all the possible Roman numerals we might print\n * and the other contains their values. The 2 arrays have the corresponding value store at the same\n * value index. Example, \"I\" is at index 0 in the romanNumerals array, and its value 1 is stored\n * at index 0 in the intValues array. We can use these parallel arrays to select the correct value. */\n\nconst ROMAN_NUMERALS = [\n  \"I\",\n  \"IV\",\n  \"V\",\n  \"IX\",\n  \"X\",\n  \"XL\",\n  \"L\",\n  \"XC\",\n  \"C\",\n  \"CD\",\n  \"D\",\n  \"CM\",\n  \"M\",\n  \"I\\u0305V\\u0305\",\n  \"V\\u0305\",\n  \"I\\u0305X\\u0305\",\n];\n\nconst INT_VALUES = [\n  1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000, 4000, 5000, 9000,\n];\n\nconst toRoman = (x) => {\n\n  /* Check to see if the value is within the given range of 1-9999. If it is not, return a String stating\n   * that the value is outside the acceptable range.*/\n  if (x < 1 || x > 9999) {\n    return x + \" is not within acceptable range of 1-9999.\";\n  } else {\n\n    /* Else the value can be represented as Roman numerals and we proceed to the conversion.*/\n    /* Save initial value for printing result*/\n    let y = x;\n\n    /* Initialize the String roman to store the converted String based on the integer\n     * argument passed through the method. */\n    let roman = \"\";\n\n    /* We want to make the greedy choice of the largest available Roman numeral each time\n     * we append a value to the final answer. To do this we must track the index starting from the\n     * largest available point, which is the length of the ROMAN_NUMERALS array - 1. */\n    let index = ROMAN_NUMERALS.length - 1;\n\n    /* As stated above we want to make the greedy choice each time we can choose to add a value. Always\n     * choosing the largest available item will always result in the correct substring and thus the correct\n     * string overall. For example, if we want to represent 1101 we start with the largest value M = 1000.\n     * That leaves us with M and a remainder of 101 to represent. The next largest numeral available is C = 100,\n     * so we append C to M yielding MC and a remainder of 01. The largest value left is I = 1, and after\n     * appending that we have MCI, the correct final result.\n     *\n     * The first while loop controls for the end condition, when the remainder x is no longer positive and\n     * the process must terminate. The inside loop and index decrement build the final result. If the value\n     * of the argument x <= the value representing a Roman numeral in the intValues array, we can append\n     * the corresponding value to the answer roman and subtract that value from the argument and check again.\n     * If the argument x is > the value of intValues at the current index, then we decrement the index\n     * to check the next largest available value as long as the argument x remains positive. */\n    while (x > 0) {\n      while (INT_VALUES[index] <= x) {\n        roman += ROMAN_NUMERALS[index];\n        x -= INT_VALUES[index];\n      }\n      index--;\n    }\n    /* When the above procedure completes and the argument x is no longer positive we return the resulting\n     * string. We use the variable y which contains the initial argument passed. */\n    return y + \" is \" + roman + \" in Roman numerals.\";\n  }\n};\n\nexport default toRoman;\n","import React, { useState } from \"react\";\nimport \"./MedianFinder.css\";\nimport toRoman from \"../Algorithms/RomanNumeralConverter\";\n\nconst RomanNumeralConverter = () => {\n    const [intInput, setIntInput] = useState(null);\n    const [errorMessage, setErrorMessage] = useState(\"\");\n    const [output, setOutput] = useState(0);\n\n    return (\n        <div className=\"container\">\n            <h3 className=\"info\">\n                Provide an integer to get converted to a Roman Numeral.\n            </h3>\n\n            <ul>\n                <li>Has to be a positive integer</li>\n                <li>Less than 10,000</li>\n            </ul>\n\n            <div className=\"error-div\">\n                <text\n                    className=\"output-text\"\n                    style={{ color: \"red\", textAlign: \"center\" }}\n                >\n                    {errorMessage}\n                </text>\n            </div>\n\n            <div className=\"input-row\">\n                <form autoComplete='off'>\n                <label className=\"labelA\">\n                    Provide an Integer:\n                    <input\n                        type=\"text\"\n                        name=\"integerToRoman\"\n                        value={intInput}\n                        onChange={(e) => setIntInput(e.target.value)}\n                    />\n                </label>\n                </form>\n            </div>\n\n            <div className=\"submit-container\">\n                <input\n                type=\"submit\"\n                value=\"Convert to Roman\"\n                className=\"submit\"\n\n                onClick={() => {\n                    if (Number(intInput) !== NaN && intInput > 0 && intInput < 10000){\n                        setOutput(toRoman(parseInt(intInput)));\n                        setErrorMessage(\"\");\n                    }\n                    else {\n                        setErrorMessage(\n                            \"Make sure you have provided a positive integer less than 10,000!\"\n                        );\n                    }\n                }}\n                />\n            </div>\n\n            <div className=\"output-div\">\n                <div className=\"output-div-column\">\n                <text>Output:</text>\n                <text className=\"output-text\">{output}</text>\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default RomanNumeralConverter;","import './App.css';\nimport MedianFinder from \"./Components/MedianFinder\";\nimport RomanNumeralConverter from \"./Components/RomanNumeralConverter\";\n\nfunction App() {\n  /*\n  Return of App component\n  */\n  return (\n    <body className=\"App\">\n      <header className={'header'}>\n        <h1>CS430 PROJECT</h1>\n      </header>\n      <section className=\"section1\">\n        <h2 className=\"section1-title\"> Median Finding: 2 Sorted Arrays </h2>\n        <MedianFinder />\n      </section>\n      <section className=\"section2\">\n        <h2 className=\"section2-title\">Searching: Roman Numerals</h2>\n        <RomanNumeralConverter />\n      </section>\n\n    </body>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}