{"version":3,"sources":["Components/Example.js","Algorithms/FindMedian.js","Components/MedianFinder.js","App.js","reportWebVitals.js","index.js"],"names":["Example","array","className","output","element","push","renderCells","FindMedian","A","B","length","x","y","low","high","partitionX","Math","floor","partitionY","leftX","rightX","leftY","rightY","Number","MIN_VALUE","console","log","MAX_VALUE","max","min","ACTIONS","EXAMPLE1","EXAMPLE2","EXAMPLE3","reducer","state","action","type","document","getElementsByClassName","style","backgroundColor","sameLength","isSorted","MedianFinder","props","useState","arrayA","setArrayA","arrayB","setArrayB","arrayAInput","setArrayAInput","arrayBInput","setArrayBInput","setOutput","errorMessage","setErrorMessage","useReducer","dispatch","handleArrayInput","input","textArray","replace","split","textArrayToIntArray","t","parseInt","onExamplePress","example","checkIfSorted","arr","i","useEffect","color","textAlign","flex","href","onClick","name","value","onChange","e","target","id","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.8567de66.chunk.js","sourcesContent":["import React, {useReducer, useEffect, useState} from 'react';\r\nimport './Example.css'\r\n\r\nconst Example = ({array})=>{\r\n\r\n\r\n    const renderCells = (array)=>{\r\n        let output = []\r\n        for (let element of array){\r\n            output.push(<text>{element}</text>)\r\n        }\r\n       return (<div className=\"cell\">\r\n           {output}\r\n       </div>)\r\n    }\r\n\r\n    return(\r\n        <div className='example-container'>\r\n            {renderCells(array)}  \r\n        </div>\r\n    )\r\n\r\n\r\n}\r\n\r\nexport default Example\r\n\r\n","function FindMedian(A, B) {\r\n  if (A.length > B.length) {\r\n    return \"The length has to be the same\";\r\n  }\r\n\r\n  let x = A.length; //always the shorter array\r\n  let y = B.length; //always the longer array\r\n  //the initial search range\r\n  let low = 0;\r\n  let high = x;\r\n\r\n  while (low <= high) {\r\n    //if this condition ever fails, it means the initial arguments were not sorted\r\n    /* we choose our initial partition as the midpoint of the smaller array\r\n     * so that we can remove the largest possible search area on the next iteration.\r\n     * We want the size of the partition to always include half of the elements of the array on each side,\r\n     * so we have the relationship that:\r\n     * partitionX + partitionY = (lengthSmallerArray + lengthLargerArray + 1 ) / 2 */\r\n    let partitionX = Math.floor((low + high) / 2);\r\n    let partitionY = Math.floor((x + y + 1) / 2 - partitionX);\r\n\r\n    //now find the values directly to the left and right of the partitions in each array\r\n    let leftX;\r\n    let rightX;\r\n    let leftY;\r\n    let rightY;\r\n\r\n    /* we also need to control what happens when there is nothing on either side of the partition\r\n     * do this by using either maximum or minimum \"dummy\" values*/\r\n\r\n    if (partitionX == 0) {\r\n      //there is nothing left of the partition in the smaller array\r\n      leftX = Number.MIN_VALUE;\r\n    } else {\r\n      console.log(\"hii\");\r\n      leftX = A[partitionX - 1];\r\n      console.log(partitionX, \"leftX\");\r\n    }\r\n\r\n    if (partitionX == x) {\r\n      //there is nothing right of the partition in the smaller array\r\n      rightX = Number.MAX_VALUE;\r\n    } else rightX = A[partitionX];\r\n\r\n    if (partitionY == 0) {\r\n      //there is nothing left of the partition in the larger array\r\n      leftY = Number.MIN_VALUE;\r\n    } else leftY = B[partitionY - 1];\r\n\r\n    if (partitionY == y) {\r\n      //there is nothing right of the partition in the larger array\r\n      rightY = Number.MAX_VALUE;\r\n    } else rightY = B[partitionY];\r\n\r\n    /* now that the values at of the current partition is established, we check to see if all the\r\n     * values on the left are less than all of those on the right. If so, we can return the median.*/\r\n\r\n    if (leftX <= rightY && leftY <= rightX) {\r\n      if ((x + y) % 2 == 0) {\r\n        //total number of elements is even\r\n        return (Math.max(leftX, leftY) + Math.min(rightX, rightY)) / 2;\r\n      } else {\r\n        //total number of elements is odd\r\n        return Math.max(leftX, leftY);\r\n      }\r\n    } else {\r\n      /* if the condition is not met we must reduce the search criteria and iterate again*/\r\n      if (leftX > rightY) {\r\n        //the median must be less than the current partitionX\r\n        high = partitionX - 1; //eliminate the search area greater than partitionX\r\n      } else {\r\n        //the median must be greater than the current partitionX\r\n        low = partitionX + 1; //eliminate the search area less than partitionX\r\n      }\r\n    }\r\n  }\r\n  return \"exception\";\r\n}\r\n\r\nexport default FindMedian;\r\n","import React, { useReducer, useEffect, useState } from \"react\";\r\nimport \"./MedianFinder.css\";\r\nimport Example from \"./Example.js\";\r\nimport FindMedian from \"../Algorithms/FindMedian\";\r\n\r\nconst ACTIONS = {\r\n  SORTED: \"sorted\",\r\n  SAME_LENGTH: \"length\",\r\n  NOT_SAME_LENGTH: \"notSameLength\",\r\n  NOT_SORTED: \"notSorted\",\r\n};\r\n\r\nconst EXAMPLE1 = {\r\n  A: [1, 3, 5, 7],\r\n  B: [2, 4, 6, 8],\r\n};\r\n\r\nconst EXAMPLE2 = {\r\n  A: [2, 3, 6, 7, 8],\r\n  B: [3, 6, 8, 11, 12],\r\n};\r\n\r\nconst EXAMPLE3 = {\r\n  A: [1, 2, 5, 11, 17, 22],\r\n  B: [3, 4, 6, 8, 9, 10],\r\n};\r\n\r\nfunction reducer(state, action) {\r\n  switch (action.type) {\r\n    case ACTIONS.SAME_LENGTH:\r\n      document.getElementsByClassName(\"check-item\")[1].style.backgroundColor =\r\n        \"rgba(41, 255, 191,.8)\";\r\n      return { sameLength: true };\r\n    case ACTIONS.SORTED:\r\n      document.getElementsByClassName(\"check-item\")[0].style.backgroundColor =\r\n        \"rgba(41, 255, 191,.8)\";\r\n      return { isSorted: true };\r\n\r\n    case ACTIONS.NOT_SAME_LENGTH:\r\n      document.getElementsByClassName(\"check-item\")[1].style.backgroundColor =\r\n        \"rgba(255, 39, 39,.8)\";\r\n\r\n      return { sameLength: false };\r\n    case ACTIONS.NOT_SORTED:\r\n      document.getElementsByClassName(\"check-item\")[0].style.backgroundColor =\r\n        \"rgba(255, 39, 39,.8)\";\r\n      return { isSorted: false };\r\n  }\r\n}\r\n\r\nconst MedianFinder = (props) => {\r\n  const [arrayA, setArrayA] = useState([]);\r\n  const [arrayB, setArrayB] = useState([]);\r\n  const [arrayAInput, setArrayAInput] = useState([]);\r\n  const [arrayBInput, setArrayBInput] = useState([]);\r\n  const [output, setOutput] = useState(0);\r\n  const [errorMessage, setErrorMessage] = useState(\"\");\r\n  const [state, dispatch] = useReducer(reducer, {\r\n    isSorted: true,\r\n    sameLength: true,\r\n  });\r\n\r\n  console.log(state, \"length\");\r\n\r\n  const handleArrayInput = (array, input) => {\r\n    //remove all the white spaces from the input, and convert into an array\r\n    let textArray = input.replace(/ /g, \"\").split(\",\");\r\n\r\n    console.log(textArray);\r\n    if (array === \"A\") {\r\n      setArrayAInput(input);\r\n      setArrayA(textArrayToIntArray(textArray));\r\n    } else {\r\n      setArrayBInput(input);\r\n      setArrayB(textArrayToIntArray(textArray));\r\n    }\r\n  };\r\n\r\n  const textArrayToIntArray = (array) => {\r\n    let output = [];\r\n    for (let t of array) {\r\n      if (t !== \"\") output.push(parseInt(t));\r\n    }\r\n\r\n    return output;\r\n  };\r\n\r\n  const onExamplePress = (example) => {\r\n    setArrayA(example.A);\r\n    setArrayB(example.B);\r\n  };\r\n\r\n  function checkIfSorted(arr) {\r\n    for (let i = 0; i < arr.length - 1; i++) {\r\n      if (arr[i] > arr[i + 1]) {\r\n        return false;\r\n      }\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (arrayB.length === arrayA.length) dispatch({ type: \"length\" });\r\n    else {\r\n      dispatch({ type: \"notSameLength\" });\r\n    }\r\n    if (checkIfSorted(arrayA) === false || checkIfSorted(arrayB) === false)\r\n      dispatch({ type: \"notSorted\" });\r\n    else dispatch({ type: \"sorted\" });\r\n  }, [arrayB, arrayA]);\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      <h3 className=\"info\">\r\n        Click an Example or provide an Input (has to be sorted and of the same\r\n        length)\r\n      </h3>\r\n      {errorMessage === \"\" ? (\r\n        <></>\r\n      ) : (\r\n        <div className=\"error-div\">\r\n          <text\r\n            className=\"output-text\"\r\n            style={{ color: \"red\", textAlign: \"center\" }}\r\n          >\r\n            {errorMessage}\r\n          </text>\r\n        </div>\r\n      )}\r\n\r\n      <div className=\"example-row\">\r\n        <a style={{flex:1}} href=\"#\" onClick={() => onExamplePress(EXAMPLE1)}>\r\n          <div className=\"example-cell\" >\r\n            <text>Example 1</text>\r\n            <Example array={EXAMPLE1.A} />\r\n            <Example array={EXAMPLE1.B} />\r\n          </div>\r\n        </a>\r\n\r\n        <a style={{flex:1}} href=\"#\" onClick={() => onExamplePress(EXAMPLE2)}>\r\n          <div className=\"example-cell\" >\r\n            <text>Example 2</text>\r\n            <Example array={EXAMPLE2.A} />\r\n            <Example array={EXAMPLE2.B} />\r\n          </div>\r\n        </a>\r\n\r\n        <a style={{flex:1}} href=\"#\" onClick={() => onExamplePress(EXAMPLE3)}>\r\n          <div className=\"example-cell\" >\r\n            <text>Example 3</text>\r\n            <Example array={EXAMPLE3.A} />\r\n            <Example array={EXAMPLE3.B} />\r\n          </div>\r\n        </a>\r\n      </div>\r\n      <div className=\"input-row\">\r\n        <form>\r\n          <label className=\"labelA\">\r\n            Array A Input:\r\n            <input\r\n              type=\"text\"\r\n              name=\"A\"\r\n              value={arrayAInput}\r\n              onChange={(e) => handleArrayInput(\"A\", e.target.value)}\r\n            />\r\n            <text>Current Array A:</text>\r\n            <Example array={arrayA} />\r\n          </label>\r\n          <label className=\"labelB\">\r\n            Array B Input\r\n            <input\r\n              value={arrayBInput}\r\n              type=\"text\"\r\n              name=\"B\"\r\n              value={arrayBInput}\r\n              onChange={(e) => handleArrayInput(\"B\", e.target.value)}\r\n            />\r\n            <text>Current Array B:</text>\r\n            <div className=\"current-array-container\">\r\n              <Example array={arrayB} />\r\n            </div>\r\n          </label>\r\n        </form>\r\n      </div>\r\n      <div className=\"submit-container\">\r\n        <input\r\n          type=\"submit\"\r\n          value=\"Compute Median\"\r\n          className=\"submit\"\r\n          onClick={() => {\r\n            if (state.isSorted && arrayA.length === arrayB.length){\r\n              setOutput(FindMedian(arrayA, arrayB)); setErrorMessage(\"\");\r\n            }\r\n            else {\r\n              setErrorMessage(\r\n                \"Make Sure the arrays are sorted, and the lengths are the same!\"\r\n              );\r\n            }\r\n          }}\r\n        />\r\n      </div>\r\n      <div className=\"check\">\r\n        <div className=\"check-column\">\r\n          <text>Is Sorted?</text>\r\n          <div id=\"check-item\" className=\"check-item\"></div>\r\n        </div>\r\n        <div className=\"check-column\">\r\n          <text>Is Same Length?</text>\r\n          <div className=\"check-item\"></div>\r\n        </div>\r\n      </div>\r\n      <div className=\"output-div\">\r\n        <div className=\"output-div-column\">\r\n          <text>Output:</text>\r\n          <text className=\"output-text\">{output}</text>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MedianFinder;\r\n","import './App.css';\nimport MedianFinder from './Components/MedianFinder';\n\nfunction App() {\n  /*\n  Return of App component\n  */\n  return (\n    <body className=\"App\">\n      <header className={'header'}>\n        <h1>CS430 PROJECT</h1>\n      </header>\n      <section className=\"section1\">\n        <h2 className=\"section1-title\"> Median Finding: 2 Sorted Arrays </h2>\n        <MedianFinder />\n\n      </section>\n      <section className=\"section2\">\n        <h2 className=\"section2-title\">Searching: Roman Numerals</h2>\n      </section>\n\n    </body>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}